JAVA PROFILE 1.0.1, created Fri Sep 18 21:45:03 2020

Copyright (c) 2003, 2005, Oracle and/or its affiliates. All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions
are met:

  - Redistributions of source code must retain the above copyright
    notice, this list of conditions and the following disclaimer.

  - Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimer in the
    documentation and/or other materials provided with the distribution.

  - Neither the name of Oracle nor the names of its
    contributors may be used to endorse or promote products derived
    from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR
CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


Header for -agentlib:hprof (or -Xrunhprof) ASCII Output (JDK 5.0 JVMTI based)

WARNING!  This file format is under development, and is subject to
change without notice.

This file contains the following types of records:

THREAD START
THREAD END      mark the lifetime of Java threads

TRACE           represents a Java stack trace.  Each trace consists
                of a series of stack frames.  Other records refer to
                TRACEs to identify (1) where object allocations have
                taken place, (2) the frames in which GC roots were
                found, and (3) frequently executed methods.

HEAP DUMP       is a complete snapshot of all live objects in the Java
                heap.  Following distinctions are made:

                ROOT    root set as determined by GC
                CLS     classes 
                OBJ     instances
                ARR     arrays

SITES           is a sorted list of allocation sites.  This identifies
                the most heavily allocated object types, and the TRACE
                at which those allocations occurred.

CPU SAMPLES     is a statistical profile of program execution.  The VM
                periodically samples all running threads, and assigns
                a quantum to active TRACEs in those threads.  Entries
                in this record are TRACEs ranked by the percentage of
                total quanta they consumed; top-ranked TRACEs are
                typically hot spots in the program.

CPU TIME        is a profile of program execution obtained by measuring
                the time spent in individual methods (excluding the time
                spent in callees), as well as by counting the number of
                times each method is called. Entries in this record are
                TRACEs ranked by the percentage of total CPU time. The
                "count" field indicates the number of times each TRACE 
                is invoked.

MONITOR TIME    is a profile of monitor contention obtained by measuring
                the time spent by a thread waiting to enter a monitor.
                Entries in this record are TRACEs ranked by the percentage
                of total monitor contention time and a brief description
                of the monitor.  The "count" field indicates the number of 
                times the monitor was contended at that TRACE.

MONITOR DUMP    is a complete snapshot of all the monitors and threads in 
                the System.

HEAP DUMP, SITES, CPU SAMPLES|TIME and MONITOR DUMP|TIME records are generated 
at program exit.  They can also be obtained during program execution by typing 
Ctrl-\ (on Solaris) or by typing Ctrl-Break (on Win32).

--------

THREAD START (obj=5000018c, id = 200001, name="main", group="main")
THREAD START (obj=5000018c, id = 200004, name="nfi-gc", group="main")
THREAD START (obj=500008ca, id = 200005, name="TruffleCompilerThread-28", group="main")
THREAD START (obj=50000926, id = 200006, name="HotSpotGraalManagement Bean Registration", group="main")
THREAD START (obj=5000018c, id = 200007, name="Native-Reference-Queue-Worker", group="main")
THREAD START (obj=5000018c, id = 200008, name="process reaper", group="system")
THREAD START (obj=50002d58, id = 200009, name="system", group="main")
THREAD END (id = 200009)
THREAD START (obj=50002d58, id = 200010, name="system", group="main")
THREAD END (id = 200010)
THREAD START (obj=500008ca, id = 200011, name="TruffleCompilerThread-34", group="main")
THREAD START (obj=50002d58, id = 200012, name="Thread-7", group="main")
THREAD START (obj=5000018c, id = 200013, name="pool-1-thread-1", group="main")
THREAD END (id = 200008)
THREAD END (id = 200012)
THREAD START (obj=500008ca, id = 200014, name="Thread-0", group="main")
THREAD END (id = 200014)
THREAD START (obj=5000018c, id = 200015, name="Thread-1", group="main")
THREAD START (obj=5000018c, id = 200016, name="Thread-3", group="main")
THREAD END (id = 200016)
THREAD END (id = 200015)
THREAD END (id = 200001)
TRACE 301632:
	java.io.FileInputStream.open0(FileInputStream.java:Unknown line)
	java.io.FileInputStream.open(FileInputStream.java:195)
	java.io.FileInputStream.<init>(FileInputStream.java:138)
	com.oracle.truffle.r.launcher.REPL$EventLoopThread.run(REPL.java:283)
TRACE 301538:
	com.oracle.truffle.nfi.impl.NFIContext.executePrimitive(NFIContext.java:Unknown line)
	com.oracle.truffle.nfi.impl.NFIContext.executePrimitive(NFIContext.java:286)
	com.oracle.truffle.nfi.impl.LibFFISignature.execute(LibFFISignature.java:186)
	com.oracle.truffle.nfi.impl.FunctionExecuteNode$SignatureExecuteNode.execute(FunctionExecuteNode.java:133)
TRACE 301814:
	jdk.vm.ci.hotspot.CompilerToVM.hasNeverInlineDirective(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.hasNeverInlineDirective(HotSpotResolvedJavaMethodImpl.java:598)
	org.graalvm.compiler.replacements.PEGraphDecoder.tryInline(PEGraphDecoder.java:859)
	org.graalvm.compiler.replacements.PEGraphDecoder.trySimplifyInvoke(PEGraphDecoder.java:744)
TRACE 302016:
	jdk.vm.ci.hotspot.CompilerToVM.installCode(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.installCode(HotSpotCodeCacheProvider.java:137)
	org.graalvm.compiler.core.target.Backend.createInstalledCode(Backend.java:194)
	org.graalvm.compiler.core.target.Backend.createInstalledCode(Backend.java:147)
TRACE 301985:
	jdk.vm.ci.hotspot.CompilerToVM.interpreterFrameSize(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.interpreterFrameSize(HotSpotCodeCacheProvider.java:195)
	org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder.computeFrameForState(HotSpotDebugInfoBuilder.java:132)
	org.graalvm.compiler.core.gen.DebugInfoBuilder.computeFrameForState(DebugInfoBuilder.java:281)
TRACE 304446:
	com.oracle.truffle.r.runtime.data.RDoubleVector$FastPathAccess.getDoubleImpl(RDoubleVector.java:375)
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble(VectorAccess.java:327)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doVectorScalar(BinaryMapNode.java:484)
TRACE 301981:
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processFixedGuard(ConditionalEliminationPhase.java:357)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processNode(ConditionalEliminationPhase.java:500)
TRACE 302892:
	org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt(Range.java:90)
	org.graalvm.compiler.lir.alloc.lsra.Interval.currentIntersectsAt(Interval.java:720)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.freeCollectInactiveAny(LinearScanWalker.java:205)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.allocFreeRegister(LinearScanWalker.java:711)
TRACE 301668:
	jdk.vm.ci.hotspot.CompilerToVM.lookupMethodInPool(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupMethod(HotSpotConstantPool.java:581)
	org.graalvm.compiler.java.BytecodeParser.lookupMethodInPool(BytecodeParser.java:4297)
	org.graalvm.compiler.java.BytecodeParser.lookupMethod(BytecodeParser.java:4291)
TRACE 305628:
	com.oracle.truffle.r.ffi.impl.nfi.TruffleNFI_Context.beforeUpcall(TruffleNFI_Context.java:392)
	com.oracle.truffle.r.ffi.impl.upcalls.Rf_allocVectorCall.execute(Rf_allocVectorCall.java:67)
	com.oracle.truffle.r.ffi.impl.upcalls.Rf_allocVectorCallGen$InteropLibraryExports$Cached.execute(Rf_allocVectorCallGen.java:94)
	com.oracle.truffle.nfi.impl.LibFFIClosure$CallClosureNode.execute(LibFFIClosure.java:169)
TRACE 302160:
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processIf(ConditionalEliminationPhase.java:431)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processNode(ConditionalEliminationPhase.java:506)
TRACE 305590:
	com.oracle.truffle.r.nodes.builtin.base.MatMult.multiplyBlock(MatMult.java:171)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMatrixMultiply(MatMult.java:240)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMatrixMultiply(MatMult.java:194)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMultiply(MatMult.java:363)
TRACE 301837:
	jdk.vm.ci.hotspot.CompilerToVM.getComponentType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getComponentType(HotSpotResolvedObjectTypeImpl.java:157)
	jdk.vm.ci.meta.ResolvedJavaType.getElementalType(ResolvedJavaType.java:206)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getModifiers(HotSpotResolvedObjectTypeImpl.java:144)
TRACE 302767:
	java.util.concurrent.ConcurrentHashMap.get(ConcurrentHashMap.java:946)
	com.oracle.truffle.api.library.LibraryFactory.getUncached(LibraryFactory.java:292)
	com.oracle.truffle.api.library.DynamicDispatchLibraryGen$UncachedDispatch.dispatch(DynamicDispatchLibrary.java:407)
	com.oracle.truffle.api.library.LibraryFactory.dispatch(LibraryFactory.java:396)
TRACE 305318:
	com.oracle.truffle.r.nodes.builtin.base.MatMult.multiplyBlock(MatMult.java:170)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMatrixMultiply(MatMult.java:240)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMatrixMultiply(MatMult.java:194)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMultiply(MatMult.java:378)
TRACE 304455:
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble(VectorAccess.java:327)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doVectorScalar(BinaryMapNode.java:484)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.executeAndSpecialize(VectorMapBinaryInternalNodeGen.java:120)
TRACE 302406:
	org.graalvm.compiler.nodes.java.InstanceOfNode.implies(InstanceOfNode.java:255)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processFixedGuard(ConditionalEliminationPhase.java:357)
TRACE 302257:
	org.graalvm.collections.EconomicMapImpl.findLinear(EconomicMapImpl.java:261)
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:256)
	org.graalvm.collections.EconomicMapImpl.get(EconomicMapImpl.java:245)
	org.graalvm.compiler.options.OptionValues.get(OptionValues.java:115)
TRACE 301820:
	jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType(CompilerToVM.java:711)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getSubklass(HotSpotResolvedObjectTypeImpl.java:250)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.findLeafConcreteSubtype(HotSpotResolvedObjectTypeImpl.java:207)
TRACE 304612:
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble(VectorAccess.java:327)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doVectorScalar(BinaryMapNode.java:484)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.executeAndSpecialize(VectorMapBinaryInternalNodeGen.java:120)
TRACE 301469:
	jdk.vm.ci.hotspot.CompilerToVM.lookupNameAndTypeRefIndexInPool(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotConstantPool.getNameAndTypeRefIndexAt(HotSpotConstantPool.java:392)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(HotSpotConstantPool.java:618)
	org.graalvm.compiler.java.BytecodeParser.lookupField(BytecodeParser.java:4302)
TRACE 302791:
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processGuard(ConditionalEliminationPhase.java:326)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processNode(ConditionalEliminationPhase.java:502)
TRACE 305061:
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble(VectorAccess.java:327)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doSameLength(BinaryMapNode.java:500)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.execute(VectorMapBinaryInternalNodeGen.java:59)
TRACE 304353:
	sun.misc.Unsafe.copyMemory(Unsafe.java:Unknown line)
	com.oracle.truffle.r.runtime.ffi.util.NativeMemory.copyMemory(NativeMemory.java:137)
	com.oracle.truffle.r.runtime.ffi.util.NativeMemory.copyMemory(NativeMemory.java:128)
	com.oracle.truffle.r.runtime.data.NativeDataAccess$NativeMirror.allocateNative(NativeDataAccess.java:326)
TRACE 304456:
	com.oracle.truffle.r.nodes.binary.BinaryMapArithmeticFunctionNode.applyDouble(BinaryMapArithmeticFunctionNode.java:112)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doVectorScalar(BinaryMapNode.java:484)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.executeAndSpecialize(VectorMapBinaryInternalNodeGen.java:120)
TRACE 305934:
	com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents(NativeDataAccess.java:1219)
	com.oracle.truffle.r.runtime.data.RDoubleVector.allocateNativeContents(RDoubleVector.java:336)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapper$DispatchAllocate.get(VectorRFFIWrapper.java:338)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute(VectorRFFIWrapperFactory.java:485)
TRACE 304655:
	sun.misc.Unsafe.freeMemory(Unsafe.java:Unknown line)
	com.oracle.truffle.r.runtime.ffi.util.NativeMemory.free(NativeMemory.java:108)
	com.oracle.truffle.r.runtime.ffi.util.NativeMemory$FreeingNativeMemoryWrapper.release(NativeMemory.java:316)
	com.oracle.truffle.r.runtime.ffi.util.ResourcesCleaner$1.run(ResourcesCleaner.java:93)
TRACE 305317:
	com.oracle.truffle.r.runtime.data.nodes.GetReadonlyData$Double.doManagedRVector(GetReadonlyData.java:53)
	com.oracle.truffle.r.runtime.data.nodes.GetReadonlyDataFactory$DoubleNodeGen.execute(GetReadonlyDataFactory.java:41)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMatrixMultiply(MatMult.java:220)
	com.oracle.truffle.r.nodes.builtin.base.MatMult.doubleMatrixMultiply(MatMult.java:194)
TRACE 302600:
	org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt(Range.java:90)
	org.graalvm.compiler.lir.alloc.lsra.Range.intersects(Range.java:48)
	org.graalvm.compiler.lir.alloc.lsra.Interval.currentIntersects(Interval.java:716)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.spillCollectInactiveAny(LinearScanWalker.java:261)
TRACE 302285:
	org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt(Range.java:80)
	org.graalvm.compiler.lir.alloc.lsra.Interval.currentIntersectsAt(Interval.java:720)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.freeCollectInactiveFixed(LinearScanWalker.java:196)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.allocFreeRegister(LinearScanWalker.java:710)
TRACE 301718:
	jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType(CompilerToVM.java:719)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.getHolder(HotSpotResolvedJavaMethodImpl.java:98)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.fromMetaspace(HotSpotResolvedJavaMethodImpl.java:116)
TRACE 302168:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processInputs(SchedulePhase.java:1152)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processStack(SchedulePhase.java:951)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processNodes(SchedulePhase.java:906)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:815)
TRACE 301779:
	jdk.vm.ci.hotspot.CompilerToVM.resolveMethod(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.resolveMethod(HotSpotResolvedObjectTypeImpl.java:457)
	jdk.vm.ci.meta.ResolvedJavaType.resolveConcreteMethod(ResolvedJavaType.java:238)
	org.graalvm.compiler.nodes.java.MethodCallTargetNode.devirtualizeCall(MethodCallTargetNode.java:150)
TRACE 304326:
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doVectorScalar(BinaryMapNode.java:484)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.executeAndSpecialize(VectorMapBinaryInternalNodeGen.java:120)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.execute(VectorMapBinaryInternalNodeGen.java:83)
	com.oracle.truffle.r.nodes.primitive.BinaryMapVectorNode.apply(BinaryMapNode.java:258)
TRACE 302046:
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.findHash(EconomicMapImpl.java:285)
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.put(EconomicMapImpl.java:426)
TRACE 301809:
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.findHash(EconomicMapImpl.java:285)
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.get(EconomicMapImpl.java:245)
TRACE 302414:
	org.graalvm.compiler.nodes.java.InstanceOfNode.implies(InstanceOfNode.java:255)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processIf(ConditionalEliminationPhase.java:431)
TRACE 302833:
	org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies(UnaryOpLogicNode.java:103)
	org.graalvm.compiler.nodes.UnaryOpLogicNode.implies(UnaryOpLogicNode.java:88)
	org.graalvm.compiler.nodes.java.InstanceOfNode.implies(InstanceOfNode.java:255)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
TRACE 302595:
	org.graalvm.compiler.lir.ValueConsumer.visitValue(ValueConsumer.java:51)
	org.graalvm.compiler.lir.LIRIntrospection.visitEach(LIRIntrospection.java:282)
	org.graalvm.compiler.lir.LIRInstructionClass.visitEachDef(LIRInstructionClass.java:275)
	org.graalvm.compiler.lir.LIRInstruction.visitEachOutput(LIRInstruction.java:336)
TRACE 302355:
	jdk.vm.ci.hotspot.CompilerToVM.lookupType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.lookupTypeInternal(HotSpotJVMCIRuntime.java:635)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.lookupType(HotSpotJVMCIRuntime.java:622)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(HotSpotConstantPool.java:621)
TRACE 303079:
	org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt(Range.java:80)
	org.graalvm.compiler.lir.alloc.lsra.Interval.currentIntersectsAt(Interval.java:720)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.freeCollectInactiveAny(LinearScanWalker.java:205)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.allocFreeRegister(LinearScanWalker.java:711)
TRACE 302224:
	org.graalvm.compiler.graph.NodeClass.deepHashCode0(NodeClass.java:570)
	org.graalvm.compiler.graph.NodeClass.valueNumber(NodeClass.java:633)
	org.graalvm.compiler.graph.Graph$1.hashCode(Graph.java:142)
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:411)
TRACE 305467:
	sun.misc.Unsafe.allocateMemory(Unsafe.java:Unknown line)
	com.oracle.truffle.r.runtime.ffi.util.NativeMemory.allocate(NativeMemory.java:101)
	com.oracle.truffle.r.runtime.data.NativeDataAccess$NativeMirror.allocateNative(NativeDataAccess.java:325)
	com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents(NativeDataAccess.java:1183)
TRACE 307015:
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute(VectorRFFIWrapperFactory.java:473)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapper.toNative(VectorRFFIWrapper.java:193)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperGen$InteropLibraryExports$Cached.toNative(VectorRFFIWrapperGen.java:269)
	com.oracle.truffle.nfi.impl.SerializeArgumentLibrary$DefaultConversion$PutPointer.putGeneric(SerializeArgumentLibrary.java:348)
TRACE 303367:
	org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.process(ComputeInliningRelevance.java:238)
	org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.compute(ComputeInliningRelevance.java:100)
	org.graalvm.compiler.phases.common.inlining.walker.CallsiteHolderExplorable.computeProbabilities(CallsiteHolderExplorable.java:206)
	org.graalvm.compiler.phases.common.inlining.walker.InliningData.doInline(InliningData.java:431)
TRACE 305319:
	com.oracle.truffle.r.runtime.data.RDoubleVector.getLength(RDoubleVector.java:202)
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getLength(VectorAccess.java:249)
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.access(VectorAccess.java:283)
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.access(VectorAccess.java:266)
TRACE 305361:
	com.oracle.truffle.api.library.LibraryFactory.getUncached(LibraryFactory.java:291)
	com.oracle.truffle.r.runtime.data.RDoubleVectorDataLibraryGen$UncachedDispatch.isWriteable(RDoubleVectorDataLibraryGen.java:1118)
	com.oracle.truffle.r.runtime.data.RDoubleVector.isMaterialized(RDoubleVector.java:111)
	com.oracle.truffle.r.nodes.attributes.CopyAttributesNode.containsMetadata(CopyAttributesNode.java:72)
TRACE 302746:
	org.graalvm.compiler.lir.dfa.LocationMarker.processInstructionBottomUp(LocationMarker.java:140)
	org.graalvm.compiler.lir.dfa.LocationMarker.processBlock(LocationMarker.java:113)
	org.graalvm.compiler.lir.dfa.LocationMarker.build(LocationMarker.java:83)
	org.graalvm.compiler.lir.dfa.LocationMarkerPhase.run(LocationMarkerPhase.java:54)
TRACE 305302:
	com.oracle.truffle.r.nodes.builtin.base.Array.arrayCached(Array.java:92)
	com.oracle.truffle.r.nodes.builtin.base.ArrayNodeGen.execute(ArrayNodeGen.java:44)
	com.oracle.truffle.r.nodes.builtin.RBuiltinNode$Arg3.call(RBuiltinNode.java:200)
	com.oracle.truffle.r.nodes.builtin.InternalNode$InternalCallNode.execute(InternalNode.java:241)
TRACE 301983:
	org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies(UnaryOpLogicNode.java:103)
	org.graalvm.compiler.nodes.UnaryOpLogicNode.implies(UnaryOpLogicNode.java:88)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
TRACE 302478:
	org.graalvm.compiler.graph.Graph.findNextLiveiterable(Graph.java:1013)
	org.graalvm.compiler.graph.Graph.getIterableNodeNext(Graph.java:1007)
	org.graalvm.compiler.graph.TypedGraphNodeIterator.forward(TypedGraphNodeIterator.java:73)
	org.graalvm.compiler.graph.TypedGraphNodeIterator.findNext(TypedGraphNodeIterator.java:49)
TRACE 301850:
	java.lang.Object.hashCode(Object.java:Unknown line)
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.findHash(EconomicMapImpl.java:285)
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
TRACE 301852:
	jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType(CompilerToVM.java:711)
	jdk.vm.ci.hotspot.HotSpotConstantPool.getHolder(HotSpotConstantPool.java:230)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(HotSpotConstantPool.java:621)
TRACE 308053:
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute(VectorRFFIWrapperFactory.java:485)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapper.toNative(VectorRFFIWrapper.java:193)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperGen$InteropLibraryExports$Cached.toNative(VectorRFFIWrapperGen.java:269)
	com.oracle.truffle.nfi.impl.SerializeArgumentLibrary$DefaultConversion$PutPointer.putGeneric(SerializeArgumentLibrary.java:348)
TRACE 302825:
	org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies(UnaryOpLogicNode.java:103)
	org.graalvm.compiler.nodes.UnaryOpLogicNode.implies(UnaryOpLogicNode.java:88)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
TRACE 305090:
	com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents(NativeDataAccess.java:1178)
	com.oracle.truffle.r.runtime.data.RLogicalVector.allocateNativeContents(RLogicalVector.java:204)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapper$DispatchAllocate.get(VectorRFFIWrapper.java:326)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute(VectorRFFIWrapperFactory.java:477)
TRACE 301086:
	jdk.vm.ci.hotspot.CompilerToVM.iterateFrames(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotStackIntrospection.iterateFrames(HotSpotStackIntrospection.java:40)
	org.graalvm.compiler.truffle.runtime.GraalTruffleRuntime.iterateImpl(GraalTruffleRuntime.java:556)
	org.graalvm.compiler.truffle.runtime.GraalTruffleRuntime.iterateFrames(GraalTruffleRuntime.java:510)
TRACE 301698:
	jdk.vm.ci.hotspot.CompilerToVM.hasNeverInlineDirective(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.hasNeverInlineDirective(HotSpotResolvedJavaMethodImpl.java:598)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.canBeInlined(HotSpotResolvedJavaMethodImpl.java:590)
	org.graalvm.compiler.java.BytecodeParser.tryInline(BytecodeParser.java:2232)
TRACE 305064:
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble(VectorAccess.java:327)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doSameLength(BinaryMapNode.java:500)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.execute(VectorMapBinaryInternalNodeGen.java:59)
TRACE 305091:
	com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents(NativeDataAccess.java:1183)
	com.oracle.truffle.r.runtime.data.RLogicalVector.allocateNativeContents(RLogicalVector.java:204)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapper$DispatchAllocate.get(VectorRFFIWrapper.java:326)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute(VectorRFFIWrapperFactory.java:477)
TRACE 301841:
	java.lang.Object.hashCode(Object.java:Unknown line)
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.putHashEntry(EconomicMapImpl.java:577)
	org.graalvm.collections.EconomicMapImpl.createHash(EconomicMapImpl.java:571)
TRACE 302708:
	org.graalvm.compiler.core.gen.DebugInfoBuilder.computeLocals(DebugInfoBuilder.java:300)
	org.graalvm.compiler.core.gen.DebugInfoBuilder.computeFrameForState(DebugInfoBuilder.java:275)
	org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder.computeFrameForState(HotSpotDebugInfoBuilder.java:131)
	org.graalvm.compiler.core.gen.DebugInfoBuilder.computeFrameForState(DebugInfoBuilder.java:281)
TRACE 301656:
	java.lang.Throwable.fillInStackTrace(Throwable.java:Unknown line)
	java.lang.Throwable.fillInStackTrace(Throwable.java:784)
	java.lang.Throwable.<init>(Throwable.java:251)
	java.lang.Exception.<init>(Exception.java:54)
TRACE 302479:
	java.lang.System.identityHashCode(System.java:Unknown line)
	org.graalvm.compiler.virtual.phases.ea.PEReadEliminationBlockState$ReadCacheEntry.hashCode(PEReadEliminationBlockState.java:71)
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.findHash(EconomicMapImpl.java:285)
TRACE 301713:
	jdk.vm.ci.hotspot.CompilerToVM.resolveFieldInPool(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(HotSpotConstantPool.java:630)
	org.graalvm.compiler.java.BytecodeParser.lookupField(BytecodeParser.java:4302)
	org.graalvm.compiler.java.BytecodeParser.genGetField(BytecodeParser.java:4667)
TRACE 302546:
	org.graalvm.compiler.lir.alloc.lsra.LinearScan.splitChildAtOpId(LinearScan.java:649)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanResolveDataFlowPhase.resolveCollectMappings(LinearScanResolveDataFlowPhase.java:75)
	org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanResolveDataFlowPhase.resolveCollectMappings(SSALinearScanResolveDataFlowPhase.java:58)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanResolveDataFlowPhase.resolveDataFlow0(LinearScanResolveDataFlowPhase.java:202)
TRACE 302238:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.calcLatestBlock(SchedulePhase.java:557)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.calcLatestBlocks(SchedulePhase.java:273)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:205)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
TRACE 302273:
	jdk.vm.ci.hotspot.CompilerToVM.lookupKlassInPool(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupType(HotSpotConstantPool.java:606)
	org.graalvm.compiler.java.BytecodeParser.lookupType(BytecodeParser.java:4248)
	org.graalvm.compiler.java.BytecodeParser.genInstanceOf(BytecodeParser.java:4435)
TRACE 301978:
	org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies(UnaryOpLogicNode.java:103)
	org.graalvm.compiler.nodes.UnaryOpLogicNode.implies(UnaryOpLogicNode.java:88)
	org.graalvm.compiler.nodes.java.InstanceOfNode.implies(InstanceOfNode.java:255)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
TRACE 302201:
	jdk.vm.ci.hotspot.CompilerToVM.getComponentType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getComponentType(HotSpotResolvedObjectTypeImpl.java:157)
	jdk.vm.ci.meta.ResolvedJavaType.getElementalType(ResolvedJavaType.java:206)
	jdk.vm.ci.meta.ResolvedJavaType.isLeaf(ResolvedJavaType.java:79)
TRACE 302703:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:790)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:196)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
	org.graalvm.compiler.phases.Phase.run(Phase.java:49)
TRACE 302403:
	org.graalvm.compiler.nodes.LogicNegationNode.implies(LogicNegationNode.java:89)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processFixedGuard(ConditionalEliminationPhase.java:357)
TRACE 302664:
	org.graalvm.compiler.graph.NodeClass.deepEquals0(NodeClass.java:647)
	org.graalvm.compiler.graph.NodeClass.dataEquals(NodeClass.java:747)
	org.graalvm.compiler.graph.Node.valueEquals(Node.java:1358)
	org.graalvm.compiler.graph.Graph$1.equals(Graph.java:137)
TRACE 300565:
	java.lang.Throwable.fillInStackTrace(Throwable.java:Unknown line)
	java.lang.Throwable.fillInStackTrace(Throwable.java:784)
	java.lang.Throwable.<init>(Throwable.java:266)
	java.lang.Exception.<init>(Exception.java:66)
TRACE 303104:
	org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.computeGlobalLiveSets(LinearScanLifetimeAnalysisPhase.java:381)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.run(LinearScanLifetimeAnalysisPhase.java:94)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanAllocationPhase.apply(LinearScanAllocationPhase.java:53)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanAllocationPhase.apply(LinearScanAllocationPhase.java:46)
TRACE 302437:
	org.graalvm.compiler.graph.Graph.findDuplicate(Graph.java:778)
	org.graalvm.compiler.graph.Graph.uniqueHelper(Graph.java:677)
	org.graalvm.compiler.graph.Graph.unique(Graph.java:672)
	org.graalvm.compiler.virtual.phases.ea.GraphEffectList.lambda$replaceAtUsages$8(GraphEffectList.java:250)
TRACE 302700:
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.putHashEntry(EconomicMapImpl.java:577)
	org.graalvm.collections.EconomicMapImpl.put(EconomicMapImpl.java:451)
	org.graalvm.collections.EconomicMapImpl.add(EconomicMapImpl.java:866)
TRACE 303136:
	org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure.processNode(PEReadEliminationClosure.java:103)
	org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure.processNode(PEReadEliminationClosure.java:80)
	org.graalvm.compiler.virtual.phases.ea.EffectsClosure.processBlock(EffectsClosure.java:254)
	org.graalvm.compiler.virtual.phases.ea.EffectsClosure.processBlock(EffectsClosure.java:69)
TRACE 301464:
	jdk.vm.ci.hotspot.CompilerToVM.lookupType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.lookupTypeInternal(HotSpotJVMCIRuntime.java:635)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.lookupType(HotSpotJVMCIRuntime.java:622)
	jdk.vm.ci.hotspot.HotSpotSignature.getParameterType(HotSpotSignature.java:166)
TRACE 302650:
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.get(EconomicMapImpl.java:245)
	org.graalvm.compiler.nodes.GraphDecoder.allocateFloatingNode(GraphDecoder.java:1379)
	org.graalvm.compiler.nodes.GraphDecoder.decodeFloatingNode(GraphDecoder.java:1357)
TRACE 301768:
	jdk.vm.ci.hotspot.CompilerToVM.findUniqueConcreteMethod(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.uniqueConcreteMethod(HotSpotResolvedJavaMethodImpl.java:427)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.findUniqueConcreteMethod(HotSpotResolvedObjectTypeImpl.java:571)
	org.graalvm.compiler.nodes.java.MethodCallTargetNode.devirtualizeCall(MethodCallTargetNode.java:155)
TRACE 302687:
	org.graalvm.compiler.graph.NodeClass.applyEdges(NodeClass.java:1289)
	org.graalvm.compiler.graph.NodeClass.applyInputs(NodeClass.java:1270)
	org.graalvm.compiler.graph.Node.applyInputs(Node.java:355)
	org.graalvm.compiler.phases.common.DeadCodeEliminationPhase.iterateSuccessorsAndInputs(DeadCodeEliminationPhase.java:122)
TRACE 303205:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:896)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:196)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
	org.graalvm.compiler.phases.Phase.run(Phase.java:49)
TRACE 305933:
	com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents(NativeDataAccess.java:1195)
	com.oracle.truffle.r.runtime.data.RIntVector.allocateNativeContents(RIntVector.java:353)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapper$DispatchAllocate.get(VectorRFFIWrapper.java:320)
	com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute(VectorRFFIWrapperFactory.java:473)
TRACE 302021:
	org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.forward(NodeClass.java:1028)
	org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.hasNext(NodeClass.java:1016)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processInputs(SchedulePhase.java:1144)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processStack(SchedulePhase.java:951)
TRACE 302894:
	org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt(Range.java:80)
	org.graalvm.compiler.lir.alloc.lsra.Range.intersects(Range.java:48)
	org.graalvm.compiler.lir.alloc.lsra.Interval.currentIntersects(Interval.java:716)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.spillCollectInactiveAny(LinearScanWalker.java:261)
TRACE 302229:
	org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.processNode(CanonicalizerPhase.java:324)
	org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.processWorkSet(CanonicalizerPhase.java:302)
	org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.run(CanonicalizerPhase.java:264)
	org.graalvm.compiler.phases.common.CanonicalizerPhase.run(CanonicalizerPhase.java:177)
TRACE 303065:
	org.graalvm.compiler.lir.LIRInstructionClass.visitEachState(LIRInstructionClass.java:288)
	org.graalvm.compiler.lir.LIRInstruction.visitEachState(LIRInstruction.java:340)
	org.graalvm.compiler.lir.dfa.LocationMarker.processInstructionBottomUp(LocationMarker.java:149)
	org.graalvm.compiler.lir.dfa.LocationMarker.processBlock(LocationMarker.java:113)
TRACE 303073:
	org.graalvm.compiler.lir.alloc.lsra.Interval$RegisterBindingLists.addToListSortedByStartAndUsePositions(Interval.java:164)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.splitBeforeUsage(LinearScanWalker.java:483)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.splitAndSpillInterval(LinearScanWalker.java:695)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.allocLockedRegister(LinearScanWalker.java:875)
TRACE 301091:
	sun.nio.fs.UnixNativeDispatcher.access0(UnixNativeDispatcher.java:Unknown line)
	sun.nio.fs.UnixNativeDispatcher.access(UnixNativeDispatcher.java:449)
	sun.nio.fs.UnixFileSystemProvider.checkAccess(UnixFileSystemProvider.java:306)
	com.oracle.truffle.polyglot.FileSystems$NIOFileSystem.checkAccess(FileSystems.java:626)
TRACE 302795:
	jdk.vm.ci.hotspot.CompilerToVM.getComponentType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getComponentType(HotSpotResolvedObjectTypeImpl.java:157)
	jdk.vm.ci.meta.ResolvedJavaType.getElementalType(ResolvedJavaType.java:206)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.isDefinitelyResolvedWithRespectTo(HotSpotResolvedObjectTypeImpl.java:841)
TRACE 302487:
	org.graalvm.compiler.graph.TypedGraphNodeIterator.forward(TypedGraphNodeIterator.java:88)
	org.graalvm.compiler.graph.TypedGraphNodeIterator.findNext(TypedGraphNodeIterator.java:49)
	org.graalvm.compiler.graph.TypedGraphNodeIterator.hasNext(TypedGraphNodeIterator.java:101)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks(ControlFlowGraph.java:465)
TRACE 302584:
	jdk.vm.ci.hotspot.CompilerToVM.interpreterFrameSize(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotCodeCacheProvider.interpreterFrameSize(HotSpotCodeCacheProvider.java:195)
	org.graalvm.compiler.hotspot.HotSpotDebugInfoBuilder.computeFrameForState(HotSpotDebugInfoBuilder.java:132)
	org.graalvm.compiler.core.gen.DebugInfoBuilder.build(DebugInfoBuilder.java:105)
TRACE 303028:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:880)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:196)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
	org.graalvm.compiler.phases.Phase.run(Phase.java:49)
TRACE 300071:
	java.lang.ClassLoader.defineClass1(ClassLoader.java:Unknown line)
	java.lang.ClassLoader.defineClass(ClassLoader.java:757)
	java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142)
	java.net.URLClassLoader.defineClass(URLClassLoader.java:468)
TRACE 302670:
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:614)
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:633)
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:633)
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:633)
TRACE 305065:
	com.oracle.truffle.r.nodes.binary.BinaryMapArithmeticFunctionNode.applyDouble(BinaryMapArithmeticFunctionNode.java:112)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doSameLength(BinaryMapNode.java:500)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNodeGen.execute(VectorMapBinaryInternalNodeGen.java:59)
TRACE 303238:
	org.graalvm.compiler.lir.alloc.lsra.LinearScan.splitChildAtOpId(LinearScan.java:649)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanResolveDataFlowPhase.resolveCollectMappings(LinearScanResolveDataFlowPhase.java:75)
	org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanResolveDataFlowPhase.resolveCollectMappings(SSALinearScanResolveDataFlowPhase.java:58)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanResolveDataFlowPhase.optimizeEmptyBlocks(LinearScanResolveDataFlowPhase.java:168)
TRACE 301821:
	java.lang.System.identityHashCode(System.java:Unknown line)
	jdk.vm.ci.hotspot.DirectHotSpotObjectConstantImpl.getIdentityHashCode(DirectHotSpotObjectConstantImpl.java:66)
	jdk.vm.ci.hotspot.HotSpotObjectConstantImpl.hashCode(HotSpotObjectConstantImpl.java:152)
	org.graalvm.compiler.graph.NodeClass.deepHashCode0(NodeClass.java:570)
TRACE 301705:
	jdk.vm.ci.hotspot.CompilerToVM.getImplementor(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getSingleImplementor(HotSpotResolvedObjectTypeImpl.java:293)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.findLeafConcreteSubtype(HotSpotResolvedObjectTypeImpl.java:182)
	org.graalvm.compiler.core.common.type.TypeReference.createTrusted(TypeReference.java:105)
TRACE 302966:
	org.graalvm.compiler.lir.alloc.lsra.LinearScanOptimizeSpillPositionPhase.optimizeInterval(LinearScanOptimizeSpillPositionPhase.java:109)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanOptimizeSpillPositionPhase.optimizeSpillPosition(LinearScanOptimizeSpillPositionPhase.java:71)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanOptimizeSpillPositionPhase.run(LinearScanOptimizeSpillPositionPhase.java:62)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanAllocationPhase.apply(LinearScanAllocationPhase.java:53)
TRACE 302676:
	org.graalvm.compiler.graph.NodeClass.applyEdges(NodeClass.java:1289)
	org.graalvm.compiler.graph.NodeClass.applySuccessors(NodeClass.java:1266)
	org.graalvm.compiler.graph.Node.applySuccessors(Node.java:364)
	org.graalvm.compiler.phases.common.DeadCodeEliminationPhase.iterateSuccessorsAndInputs(DeadCodeEliminationPhase.java:121)
TRACE 302811:
	org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.buildIntervals(LinearScanLifetimeAnalysisPhase.java:809)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.run(LinearScanLifetimeAnalysisPhase.java:95)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanAllocationPhase.apply(LinearScanAllocationPhase.java:53)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanAllocationPhase.apply(LinearScanAllocationPhase.java:46)
TRACE 302580:
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.putHashEntry(EconomicMapImpl.java:577)
	org.graalvm.collections.EconomicMapImpl.createHash(EconomicMapImpl.java:571)
	org.graalvm.collections.EconomicMapImpl.putHashEntry(EconomicMapImpl.java:580)
TRACE 301832:
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.fromClass0(HotSpotJVMCIRuntime.java:500)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.fromClass(HotSpotJVMCIRuntime.java:513)
	jdk.vm.ci.hotspot.HotSpotJDKReflection.getType(HotSpotJDKReflection.java:187)
	jdk.vm.ci.hotspot.HotSpotObjectConstantImpl.getType(HotSpotObjectConstantImpl.java:62)
TRACE 301861:
	jdk.vm.ci.hotspot.CompilerToVM.hasNeverInlineDirective(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.hasNeverInlineDirective(HotSpotResolvedJavaMethodImpl.java:598)
	jdk.vm.ci.hotspot.HotSpotResolvedJavaMethodImpl.canBeInlined(HotSpotResolvedJavaMethodImpl.java:590)
	org.graalvm.compiler.replacements.InlineDuringParsingPlugin.shouldInlineInvoke(InlineDuringParsingPlugin.java:64)
TRACE 302634:
	org.graalvm.compiler.phases.common.LoweringPhase$Round.process(LoweringPhase.java:508)
	org.graalvm.compiler.phases.common.LoweringPhase$Round.access$200(LoweringPhase.java:355)
	org.graalvm.compiler.phases.common.LoweringPhase$Round$ProcessFrame.preprocess(LoweringPhase.java:419)
	org.graalvm.compiler.phases.common.LoweringPhase.processBlock(LoweringPhase.java:578)
TRACE 302931:
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processNodes(ConditionalEliminationPhase.java:456)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.enter(ConditionalEliminationPhase.java:448)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.enter(ConditionalEliminationPhase.java:263)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.visitDominatorTreeDeferLoopExits(ControlFlowGraph.java:256)
TRACE 302442:
	org.graalvm.compiler.graph.NodeClass.applyHelper(NodeClass.java:1295)
	org.graalvm.compiler.graph.NodeClass.applyEdges(NodeClass.java:1286)
	org.graalvm.compiler.graph.NodeClass.applyInputs(NodeClass.java:1270)
	org.graalvm.compiler.graph.Node.applyInputs(Node.java:355)
TRACE 304610:
	com.oracle.truffle.r.runtime.data.RDataFactory.createDoubleVector(RDataFactory.java:806)
	com.oracle.truffle.r.runtime.RType.create(RType.java:276)
	com.oracle.truffle.r.nodes.primitive.BinaryMapVectorNode.apply(BinaryMapNode.java:256)
	com.oracle.truffle.r.nodes.binary.BinaryArithmeticNode.doNumericVectorCached(BinaryArithmeticNode.java:95)
TRACE 303152:
	org.graalvm.compiler.graph.iterators.PredicatedProxyNodeIterator.forward(PredicatedProxyNodeIterator.java:44)
	org.graalvm.compiler.graph.iterators.NodeIterator.hasNext(NodeIterator.java:40)
	org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure$MergeProcessor.merge(PartialEscapeClosure.java:795)
	org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure$ReadEliminationMergeProcessor.merge(PEReadEliminationClosure.java:368)
TRACE 303066:
	org.graalvm.compiler.lir.ValueConsumer.visitValue(ValueConsumer.java:51)
	org.graalvm.compiler.lir.LIRIntrospection.visitEach(LIRIntrospection.java:292)
	org.graalvm.compiler.lir.LIRInstructionClass.visitEachAlive(LIRInstructionClass.java:267)
	org.graalvm.compiler.lir.LIRInstruction.visitEachAlive(LIRInstruction.java:328)
TRACE 301865:
	org.graalvm.compiler.replacements.PEGraphDecoder.canonicalizeFixedNode(PEGraphDecoder.java:1277)
	org.graalvm.compiler.nodes.SimplifyingGraphDecoder.handleFixedNode(SimplifyingGraphDecoder.java:188)
	org.graalvm.compiler.replacements.PEGraphDecoder.handleFixedNode(PEGraphDecoder.java:1167)
	org.graalvm.compiler.nodes.GraphDecoder.processNextNode(GraphDecoder.java:761)
TRACE 301015:
	java.lang.String.intern(String.java:Unknown line)
	com.oracle.truffle.r.runtime.Utils.intern(Utils.java:726)
	com.oracle.truffle.r.nodes.access.variables.ReadVariableNode.<init>(ReadVariableNode.java:234)
	com.oracle.truffle.r.nodes.access.variables.ReadVariableNode.<init>(ReadVariableNode.java:229)
TRACE 302475:
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlock(ControlFlowGraph.java:455)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks(ControlFlowGraph.java:467)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute(ControlFlowGraph.java:82)
	org.graalvm.compiler.loop.LoopsData.<init>(LoopsData.java:52)
TRACE 302771:
	jdk.vm.ci.hotspot.CompilerToVM.getSymbol(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupUtf8(HotSpotConstantPool.java:549)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(HotSpotConstantPool.java:620)
	org.graalvm.compiler.java.BytecodeParser.lookupField(BytecodeParser.java:4302)
TRACE 303575:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:815)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:196)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
	org.graalvm.compiler.phases.Phase.run(Phase.java:49)
TRACE 303107:
	org.graalvm.compiler.graph.NodeClass.dataEquals(NodeClass.java:687)
	org.graalvm.compiler.graph.Node.valueEquals(Node.java:1358)
	org.graalvm.compiler.graph.Graph$1.equals(Graph.java:137)
	org.graalvm.collections.EconomicMapImpl.compareKeys(EconomicMapImpl.java:278)
TRACE 302683:
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks(ControlFlowGraph.java:465)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute(ControlFlowGraph.java:82)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:187)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
TRACE 302073:
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:298)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processFixedGuard(ConditionalEliminationPhase.java:357)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processNode(ConditionalEliminationPhase.java:500)
TRACE 303522:
	org.graalvm.compiler.nodes.LogicNegationNode.implies(LogicNegationNode.java:89)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processIf(ConditionalEliminationPhase.java:431)
TRACE 305474:
	com.oracle.truffle.object.TrieNode$BitmapNode.find(TrieNode.java:256)
	com.oracle.truffle.object.TrieNode.find(TrieNode.java:61)
	com.oracle.truffle.object.TriePropertyMap.getEntry(TriePropertyMap.java:213)
	com.oracle.truffle.object.TriePropertyMap.get(TriePropertyMap.java:207)
TRACE 303130:
	org.graalvm.compiler.nodes.GraphDecoder.makeFixedNodeInputs(GraphDecoder.java:1247)
	org.graalvm.compiler.nodes.GraphDecoder.processNextNode(GraphDecoder.java:639)
	org.graalvm.compiler.nodes.GraphDecoder.decode(GraphDecoder.java:508)
	org.graalvm.compiler.replacements.PEGraphDecoder.decode(PEGraphDecoder.java:641)
TRACE 303072:
	org.graalvm.compiler.lir.alloc.lsra.LinearScan.allocate(LinearScan.java:694)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanPhase.run(LinearScanPhase.java:42)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanPhase.run(LinearScanPhase.java:35)
	org.graalvm.compiler.lir.phases.LIRPhase.apply(LIRPhase.java:117)
TRACE 302027:
	jdk.vm.ci.hotspot.CompilerToVM.getComponentType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getComponentType(HotSpotResolvedObjectTypeImpl.java:157)
	org.graalvm.compiler.nodes.java.StoreIndexedNode.virtualize(StoreIndexedNode.java:106)
	org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.virtualize(PartialEscapeClosure.java:259)
TRACE 302164:
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:414)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processGuard(ConditionalEliminationPhase.java:326)
TRACE 302179:
	org.graalvm.compiler.nodes.GraphDecoder.readProperties(GraphDecoder.java:1216)
	org.graalvm.compiler.nodes.GraphDecoder.processNextNode(GraphDecoder.java:640)
	org.graalvm.compiler.nodes.GraphDecoder.decode(GraphDecoder.java:508)
	org.graalvm.compiler.replacements.PEGraphDecoder.decode(PEGraphDecoder.java:641)
TRACE 305199:
	com.oracle.truffle.r.runtime.data.RDoubleVector$FastPathAccess.getDoubleImpl(RDoubleVector.java:375)
	com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble(VectorAccess.java:327)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode$10.perform(BinaryMapNode.java:364)
	com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doSameLength(BinaryMapNode.java:500)
TRACE 302015:
	jdk.vm.ci.hotspot.CompilerToVM.getImplementor(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getSingleImplementor(HotSpotResolvedObjectTypeImpl.java:293)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getSingleImplementor(HotSpotResolvedObjectTypeImpl.java:60)
	org.graalvm.compiler.nodes.java.MethodCallTargetNode.simplify(MethodCallTargetNode.java:198)
TRACE 302235:
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks(ControlFlowGraph.java:547)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute(ControlFlowGraph.java:82)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:187)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
TRACE 302500:
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:616)
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:633)
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:633)
	org.graalvm.compiler.nodes.FrameState.applyToNonVirtual(FrameState.java:633)
TRACE 303089:
	org.graalvm.compiler.lir.ValueConsumer.visitValue(ValueConsumer.java:51)
	org.graalvm.compiler.lir.LIRFrameState.visitValues(LIRFrameState.java:157)
	org.graalvm.compiler.lir.LIRFrameState.visitEachState(LIRFrameState.java:105)
	org.graalvm.compiler.lir.LIRInstructionClass.visitEachState(LIRInstructionClass.java:291)
TRACE 303463:
	org.graalvm.compiler.lir.LIRInstruction.visitEachState(LIRInstruction.java:340)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.computeLocalLiveSets(LinearScanLifetimeAnalysisPhase.java:241)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.run(LinearScanLifetimeAnalysisPhase.java:93)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanAllocationPhase.apply(LinearScanAllocationPhase.java:53)
TRACE 303279:
	org.graalvm.compiler.core.common.spi.JavaConstantFieldProvider.isStableField(JavaConstantFieldProvider.java:122)
	org.graalvm.compiler.hotspot.meta.HotSpotConstantFieldProvider.isStableField(HotSpotConstantFieldProvider.java:60)
	org.graalvm.compiler.core.common.spi.JavaConstantFieldProvider.readConstantField(JavaConstantFieldProvider.java:77)
	org.graalvm.compiler.truffle.compiler.TruffleConstantFieldProvider.readConstantFieldFast(TruffleConstantFieldProvider.java:103)
TRACE 303313:
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks(ControlFlowGraph.java:547)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute(ControlFlowGraph.java:82)
	org.graalvm.compiler.loop.LoopsData.<init>(LoopsData.java:52)
	org.graalvm.compiler.loop.phases.LoopFullUnrollPhase.run(LoopFullUnrollPhase.java:55)
TRACE 302684:
	org.graalvm.compiler.nodes.java.InstanceOfNode.implies(InstanceOfNode.java:255)
	org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition(ConditionalEliminationUtil.java:294)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.tryProveGuardCondition(ConditionalEliminationPhase.java:808)
	org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processGuard(ConditionalEliminationPhase.java:326)
TRACE 302706:
	org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.processNode(CanonicalizerPhase.java:324)
	org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.processWorkSet(CanonicalizerPhase.java:302)
	org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.run(CanonicalizerPhase.java:264)
	org.graalvm.compiler.phases.Phase.run(Phase.java:49)
TRACE 302498:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processNodes(SchedulePhase.java:908)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:815)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:196)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
TRACE 302661:
	org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.createLoopScope(ComputeInliningRelevance.java:145)
	org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.compute(ComputeInliningRelevance.java:97)
	org.graalvm.compiler.phases.common.inlining.walker.CallsiteHolderExplorable.computeProbabilities(CallsiteHolderExplorable.java:206)
	org.graalvm.compiler.phases.common.inlining.walker.InliningData.doInline(InliningData.java:431)
TRACE 303031:
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.put(EconomicMapImpl.java:426)
	org.graalvm.collections.EconomicMapImpl.add(EconomicMapImpl.java:866)
	org.graalvm.compiler.phases.common.util.EconomicSetNodeEventListener.add(EconomicSetNodeEventListener.java:91)
TRACE 303342:
	org.graalvm.compiler.core.common.Fields.copy(Fields.java:125)
	org.graalvm.compiler.core.common.Fields.copy(Fields.java:112)
	org.graalvm.compiler.graph.Node.clone(Node.java:1064)
	org.graalvm.compiler.graph.NodeClass.createNodeDuplicates(NodeClass.java:933)
TRACE 303638:
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.spillCollectInactiveAny(LinearScanWalker.java:264)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.allocLockedRegister(LinearScanWalker.java:829)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.activateCurrent(LinearScanWalker.java:1062)
	org.graalvm.compiler.lir.alloc.lsra.IntervalWalker.walkTo(IntervalWalker.java:241)
TRACE 302918:
	org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.collectLockedVirtualObjects(PartialEscapeClosure.java:420)
	org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.processNodeWithState(PartialEscapeClosure.java:376)
	org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.processNodeInputs(PartialEscapeClosure.java:367)
	org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.processNodeInternal(PartialEscapeClosure.java:238)
TRACE 303401:
	org.graalvm.compiler.lir.constopt.ConstantTreeAnalyzer.process(ConstantTreeAnalyzer.java:126)
	org.graalvm.compiler.lir.constopt.ConstantTreeAnalyzer.analyzeBlocks(ConstantTreeAnalyzer.java:99)
	org.graalvm.compiler.lir.constopt.ConstantTreeAnalyzer.analyze(ConstantTreeAnalyzer.java:50)
	org.graalvm.compiler.lir.constopt.ConstantLoadOptimization$Optimization.createConstantTree(ConstantLoadOptimization.java:291)
TRACE 302206:
	org.graalvm.collections.EconomicMapImpl.getHashIndex(EconomicMapImpl.java:414)
	org.graalvm.collections.EconomicMapImpl.findHash(EconomicMapImpl.java:285)
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.containsKey(EconomicMapImpl.java:608)
TRACE 302628:
	org.graalvm.collections.EconomicMapImpl.compareKeys(EconomicMapImpl.java:276)
	org.graalvm.collections.EconomicMapImpl.findHash(EconomicMapImpl.java:288)
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.get(EconomicMapImpl.java:245)
TRACE 302394:
	org.graalvm.compiler.nodes.StructuredGraph.maybeCompress(StructuredGraph.java:447)
	org.graalvm.compiler.truffle.compiler.PartialEvaluator.fastPartialEvaluation(PartialEvaluator.java:652)
	org.graalvm.compiler.truffle.compiler.PartialEvaluator.createGraph(PartialEvaluator.java:284)
	org.graalvm.compiler.truffle.compiler.TruffleCompilerImpl.compileAST(TruffleCompilerImpl.java:467)
TRACE 303043:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:897)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:196)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
	org.graalvm.compiler.phases.Phase.run(Phase.java:49)
TRACE 305654:
	com.oracle.truffle.api.library.LibraryFactory.getUncached(LibraryFactory.java:291)
	com.oracle.truffle.r.runtime.data.RIntVectorDataLibraryGen$UncachedDispatch.isWriteable(RIntVectorDataLibraryGen.java:1118)
	com.oracle.truffle.r.runtime.data.RIntVector.materialize(RIntVector.java:277)
	com.oracle.truffle.r.runtime.data.RIntVector.cachedMaterialize(RIntVector.java:365)
TRACE 305450:
	java.util.ArrayList.forEach(ArrayList.java:1256)
	org.graalvm.compiler.lir.constopt.DefUseTree.forEach(DefUseTree.java:84)
	org.graalvm.compiler.lir.constopt.ConstantTree.<init>(ConstantTree.java:109)
	org.graalvm.compiler.lir.constopt.ConstantLoadOptimization$Optimization.createConstantTree(ConstantLoadOptimization.java:279)
TRACE 302366:
	org.graalvm.compiler.graph.InputEdges.update(InputEdges.java:66)
	org.graalvm.compiler.nodes.GraphDecoder.makeFixedNodeInputs(GraphDecoder.java:1250)
	org.graalvm.compiler.nodes.GraphDecoder.processNextNode(GraphDecoder.java:639)
	org.graalvm.compiler.nodes.GraphDecoder.decode(GraphDecoder.java:508)
TRACE 301857:
	jdk.vm.ci.hotspot.CompilerToVM.lookupType(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.lookupTypeInternal(HotSpotJVMCIRuntime.java:635)
	jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.lookupType(HotSpotJVMCIRuntime.java:622)
	jdk.vm.ci.hotspot.HotSpotSignature.getReturnType(HotSpotSignature.java:198)
TRACE 302917:
	org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.forward(NodeClass.java:1028)
	org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.hasNext(NodeClass.java:1016)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processNodes(SchedulePhase.java:904)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative(SchedulePhase.java:815)
TRACE 302932:
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.sortNodesLatestWithinBlock(SchedulePhase.java:436)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.sortNodesLatestWithinBlock(SchedulePhase.java:398)
	org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.run(SchedulePhase.java:206)
	org.graalvm.compiler.phases.schedule.SchedulePhase.run(SchedulePhase.java:155)
TRACE 301686:
	jdk.vm.ci.hotspot.CompilerToVM.getImplementor(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getSingleImplementor(HotSpotResolvedObjectTypeImpl.java:293)
	jdk.vm.ci.hotspot.HotSpotResolvedObjectTypeImpl.getSingleImplementor(HotSpotResolvedObjectTypeImpl.java:60)
	org.graalvm.compiler.core.common.type.StampFactory.forDeclaredType(StampFactory.java:309)
TRACE 302468:
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks(ControlFlowGraph.java:465)
	org.graalvm.compiler.nodes.cfg.ControlFlowGraph.compute(ControlFlowGraph.java:82)
	org.graalvm.compiler.loop.LoopsData.<init>(LoopsData.java:52)
	org.graalvm.compiler.loop.phases.LoopFullUnrollPhase.run(LoopFullUnrollPhase.java:55)
TRACE 302630:
	org.graalvm.collections.EconomicMapImpl.find(EconomicMapImpl.java:254)
	org.graalvm.collections.EconomicMapImpl.get(EconomicMapImpl.java:245)
	org.graalvm.compiler.core.common.util.FrequencyEncoder.getIndex(FrequencyEncoder.java:101)
	org.graalvm.compiler.nodes.GraphEncoder.encode(GraphEncoder.java:239)
TRACE 303005:
	org.graalvm.compiler.graph.iterators.PredicatedProxyNodeIterator.forward(PredicatedProxyNodeIterator.java:44)
	org.graalvm.compiler.graph.iterators.NodeIterator.hasNext(NodeIterator.java:40)
	org.graalvm.compiler.graph.iterators.NodeIterable.snapshotTo(NodeIterable.java:52)
	org.graalvm.compiler.graph.iterators.NodeIterable.snapshot(NodeIterable.java:47)
TRACE 302737:
	jdk.vm.ci.hotspot.CompilerToVM.resolveFieldInPool(CompilerToVM.java:Unknown line)
	jdk.vm.ci.hotspot.HotSpotConstantPool.lookupField(HotSpotConstantPool.java:630)
	org.graalvm.compiler.java.BytecodeParser.lookupField(BytecodeParser.java:4302)
	org.graalvm.compiler.java.BytecodeParser.genGetStatic(BytecodeParser.java:4808)
TRACE 303412:
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.freeCollectInactiveAny(LinearScanWalker.java:206)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.allocFreeRegister(LinearScanWalker.java:711)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.activateCurrent(LinearScanWalker.java:1059)
	org.graalvm.compiler.lir.alloc.lsra.IntervalWalker.walkTo(IntervalWalker.java:241)
TRACE 303421:
	org.graalvm.compiler.lir.alloc.lsra.LinearScan.splitChildAtOpId(LinearScan.java:649)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanResolveDataFlowPhase.resolveCollectMappings(LinearScanResolveDataFlowPhase.java:76)
	org.graalvm.compiler.lir.alloc.lsra.ssa.SSALinearScanResolveDataFlowPhase.resolveCollectMappings(SSALinearScanResolveDataFlowPhase.java:58)
	org.graalvm.compiler.lir.alloc.lsra.LinearScanResolveDataFlowPhase.resolveDataFlow0(LinearScanResolveDataFlowPhase.java:202)
TRACE 302901:
	org.graalvm.compiler.lir.RedundantMoveElimination$Optimization.updateState(RedundantMoveElimination.java:400)
	org.graalvm.compiler.lir.RedundantMoveElimination$Optimization.solveDataFlow(RedundantMoveElimination.java:296)
	org.graalvm.compiler.lir.RedundantMoveElimination$Optimization.doOptimize(RedundantMoveElimination.java:159)
	org.graalvm.compiler.lir.RedundantMoveElimination$Optimization.access$000(RedundantMoveElimination.java:107)
TRACE 302954:
	org.graalvm.compiler.phases.common.FixReadsPhase$RawConditionalEliminationVisitor.replaceConstantInputs(FixReadsPhase.java:253)
	org.graalvm.compiler.phases.common.FixReadsPhase$RawConditionalEliminationVisitor.processNode(FixReadsPhase.java:261)
	org.graalvm.compiler.phases.common.FixReadsPhase$RawConditionalEliminationVisitor.enter(FixReadsPhase.java:580)
	org.graalvm.compiler.phases.common.FixReadsPhase$RawConditionalEliminationVisitor.enter(FixReadsPhase.java:145)
TRACE 303372:
	org.graalvm.compiler.core.match.MatchPattern.matchShape(MatchPattern.java:267)
	org.graalvm.compiler.core.match.MatchStatement.generate(MatchStatement.java:92)
	org.graalvm.compiler.core.gen.NodeLIRBuilder.matchComplexExpressions(NodeLIRBuilder.java:454)
	org.graalvm.compiler.core.gen.NodeLIRBuilder.matchBlock(NodeLIRBuilder.java:426)
TRACE 303241:
	org.graalvm.compiler.lir.stackslotalloc.FixPointIntervalBuilder.markOutInterval(FixPointIntervalBuilder.java:168)
	org.graalvm.compiler.lir.stackslotalloc.FixPointIntervalBuilder.processBlock(FixPointIntervalBuilder.java:124)
	org.graalvm.compiler.lir.stackslotalloc.FixPointIntervalBuilder.build(FixPointIntervalBuilder.java:94)
	org.graalvm.compiler.lir.stackslotalloc.LSStackSlotAllocator$Allocator.buildIntervals(LSStackSlotAllocator.java:219)
CPU SAMPLES BEGIN (total = 1120843) Fri Sep 18 23:21:55 2020
rank   self  accum   count trace method
   1 45.20% 45.20%  506661 301632 java.io.FileInputStream.open0
   2 42.09% 87.29%  471729 301538 com.oracle.truffle.nfi.impl.NFIContext.executePrimitive
   3  0.63% 87.92%    7085 301814 jdk.vm.ci.hotspot.CompilerToVM.hasNeverInlineDirective
   4  0.51% 88.43%    5675 302016 jdk.vm.ci.hotspot.CompilerToVM.installCode
   5  0.48% 88.91%    5344 301985 jdk.vm.ci.hotspot.CompilerToVM.interpreterFrameSize
   6  0.38% 89.29%    4292 304446 com.oracle.truffle.r.runtime.data.RDoubleVector$FastPathAccess.getDoubleImpl
   7  0.32% 89.61%    3622 301981 org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition
   8  0.24% 89.85%    2705 302892 org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt
   9  0.24% 90.09%    2696 301668 jdk.vm.ci.hotspot.CompilerToVM.lookupMethodInPool
  10  0.22% 90.32%    2483 305628 com.oracle.truffle.r.ffi.impl.nfi.TruffleNFI_Context.beforeUpcall
  11  0.21% 90.53%    2402 302160 org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition
  12  0.21% 90.74%    2379 305590 com.oracle.truffle.r.nodes.builtin.base.MatMult.multiplyBlock
  13  0.20% 90.94%    2241 301837 jdk.vm.ci.hotspot.CompilerToVM.getComponentType
  14  0.19% 91.13%    2090 302767 java.util.concurrent.ConcurrentHashMap.get
  15  0.13% 91.26%    1443 305318 com.oracle.truffle.r.nodes.builtin.base.MatMult.multiplyBlock
  16  0.12% 91.38%    1379 304455 com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble
  17  0.12% 91.50%    1362 302406 org.graalvm.compiler.nodes.java.InstanceOfNode.implies
  18  0.12% 91.62%    1354 302257 org.graalvm.collections.EconomicMapImpl.findLinear
  19  0.12% 91.74%    1337 301820 jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0
  20  0.12% 91.86%    1309 304612 com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble
  21  0.11% 91.97%    1253 301469 jdk.vm.ci.hotspot.CompilerToVM.lookupNameAndTypeRefIndexInPool
  22  0.11% 92.08%    1209 302791 org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition
  23  0.10% 92.18%    1173 305061 com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble
  24  0.10% 92.28%    1117 304353 sun.misc.Unsafe.copyMemory
  25  0.10% 92.38%    1091 304456 com.oracle.truffle.r.nodes.binary.BinaryMapArithmeticFunctionNode.applyDouble
  26  0.10% 92.48%    1090 305934 com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents
  27  0.10% 92.57%    1065 304655 sun.misc.Unsafe.freeMemory
  28  0.09% 92.66%     996 305317 com.oracle.truffle.r.runtime.data.nodes.GetReadonlyData$Double.doManagedRVector
  29  0.09% 92.75%     972 302600 org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt
  30  0.08% 92.83%     936 302285 org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt
  31  0.08% 92.91%     900 301718 jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0
  32  0.08% 92.99%     893 302168 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processInputs
  33  0.08% 93.07%     864 301779 jdk.vm.ci.hotspot.CompilerToVM.resolveMethod
  34  0.08% 93.14%     844 304326 com.oracle.truffle.r.nodes.primitive.VectorMapBinaryInternalNode.doVectorScalar
  35  0.07% 93.22%     830 302046 org.graalvm.collections.EconomicMapImpl.getHashIndex
  36  0.07% 93.29%     782 301809 org.graalvm.collections.EconomicMapImpl.getHashIndex
  37  0.07% 93.36%     769 302414 org.graalvm.compiler.nodes.java.InstanceOfNode.implies
  38  0.07% 93.42%     743 302833 org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies
  39  0.06% 93.48%     678 302595 org.graalvm.compiler.lir.ValueConsumer.visitValue
  40  0.06% 93.54%     628 302355 jdk.vm.ci.hotspot.CompilerToVM.lookupType
  41  0.06% 93.59%     626 303079 org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt
  42  0.05% 93.65%     609 302224 org.graalvm.compiler.graph.NodeClass.deepHashCode0
  43  0.05% 93.70%     596 305467 sun.misc.Unsafe.allocateMemory
  44  0.05% 93.75%     589 307015 com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute
  45  0.05% 93.81%     577 303367 org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance$Scope.process
  46  0.05% 93.85%     521 305319 com.oracle.truffle.r.runtime.data.RDoubleVector.getLength
  47  0.05% 93.90%     509 305361 com.oracle.truffle.api.library.LibraryFactory.getUncached
  48  0.04% 93.94%     503 302746 org.graalvm.compiler.lir.dfa.LocationMarker.processInstructionBottomUp
  49  0.04% 93.99%     501 305302 com.oracle.truffle.r.nodes.builtin.base.Array.arrayCached
  50  0.04% 94.03%     493 301983 org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies
  51  0.04% 94.08%     492 302478 org.graalvm.compiler.graph.Graph.findNextLiveiterable
  52  0.04% 94.12%     459 301850 java.lang.Object.hashCode
  53  0.04% 94.16%     453 301852 jdk.vm.ci.hotspot.CompilerToVM.getResolvedJavaType0
  54  0.04% 94.20%     453 308053 com.oracle.truffle.r.runtime.ffi.VectorRFFIWrapperFactory$DispatchAllocateNodeGen.execute
  55  0.04% 94.24%     432 302825 org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies
  56  0.04% 94.27%     431 305090 com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents
  57  0.04% 94.31%     406 301086 jdk.vm.ci.hotspot.CompilerToVM.iterateFrames
  58  0.04% 94.35%     394 301698 jdk.vm.ci.hotspot.CompilerToVM.hasNeverInlineDirective
  59  0.03% 94.38%     387 305064 com.oracle.truffle.r.runtime.data.nodes.VectorAccess.getDouble
  60  0.03% 94.41%     380 305091 com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents
  61  0.03% 94.45%     379 301841 java.lang.Object.hashCode
  62  0.03% 94.48%     376 302708 org.graalvm.compiler.core.gen.DebugInfoBuilder.computeLocals
  63  0.03% 94.51%     346 301656 java.lang.Throwable.fillInStackTrace
  64  0.03% 94.54%     341 302479 java.lang.System.identityHashCode
  65  0.03% 94.57%     340 301713 jdk.vm.ci.hotspot.CompilerToVM.resolveFieldInPool
  66  0.03% 94.60%     338 302546 org.graalvm.compiler.lir.alloc.lsra.LinearScan.splitChildAtOpId
  67  0.03% 94.63%     335 302238 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.calcLatestBlock
  68  0.03% 94.66%     331 302273 jdk.vm.ci.hotspot.CompilerToVM.lookupKlassInPool
  69  0.03% 94.69%     325 301978 org.graalvm.compiler.nodes.UnaryOpLogicNode.skipThroughPisAndProxies
  70  0.03% 94.72%     323 302201 jdk.vm.ci.hotspot.CompilerToVM.getComponentType
  71  0.03% 94.75%     320 302703 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative
  72  0.03% 94.78%     309 302403 org.graalvm.compiler.nodes.LogicNegationNode.implies
  73  0.03% 94.80%     306 302664 org.graalvm.compiler.graph.NodeClass.deepEquals0
  74  0.03% 94.83%     305 300565 java.lang.Throwable.fillInStackTrace
  75  0.03% 94.86%     305 303104 org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.computeGlobalLiveSets
  76  0.03% 94.89%     304 302437 org.graalvm.compiler.graph.Graph.findDuplicate
  77  0.03% 94.91%     304 302700 org.graalvm.collections.EconomicMapImpl.getHashIndex
  78  0.03% 94.94%     300 303136 org.graalvm.compiler.virtual.phases.ea.PEReadEliminationClosure.processNode
  79  0.03% 94.96%     282 301464 jdk.vm.ci.hotspot.CompilerToVM.lookupType
  80  0.03% 94.99%     281 302650 org.graalvm.collections.EconomicMapImpl.find
  81  0.02% 95.01%     275 301768 jdk.vm.ci.hotspot.CompilerToVM.findUniqueConcreteMethod
  82  0.02% 95.04%     259 302687 org.graalvm.compiler.graph.NodeClass.applyEdges
  83  0.02% 95.06%     258 303205 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative
  84  0.02% 95.08%     252 305933 com.oracle.truffle.r.runtime.data.NativeDataAccess.allocateNativeContents
  85  0.02% 95.10%     250 302021 org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.forward
  86  0.02% 95.13%     241 302894 org.graalvm.compiler.lir.alloc.lsra.Range.intersectsAt
  87  0.02% 95.15%     236 302229 org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.processNode
  88  0.02% 95.17%     234 303065 org.graalvm.compiler.lir.LIRInstructionClass.visitEachState
  89  0.02% 95.19%     228 303073 org.graalvm.compiler.lir.alloc.lsra.Interval$RegisterBindingLists.addToListSortedByStartAndUsePositions
  90  0.02% 95.21%     227 301091 sun.nio.fs.UnixNativeDispatcher.access0
  91  0.02% 95.23%     221 302795 jdk.vm.ci.hotspot.CompilerToVM.getComponentType
  92  0.02% 95.25%     217 302487 org.graalvm.compiler.graph.TypedGraphNodeIterator.forward
  93  0.02% 95.27%     217 302584 jdk.vm.ci.hotspot.CompilerToVM.interpreterFrameSize
  94  0.02% 95.29%     213 303028 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative
  95  0.02% 95.31%     211 300071 java.lang.ClassLoader.defineClass1
  96  0.02% 95.32%     211 302670 org.graalvm.compiler.nodes.FrameState.applyToNonVirtual
  97  0.02% 95.34%     208 305065 com.oracle.truffle.r.nodes.binary.BinaryMapArithmeticFunctionNode.applyDouble
  98  0.02% 95.36%     206 303238 org.graalvm.compiler.lir.alloc.lsra.LinearScan.splitChildAtOpId
  99  0.02% 95.38%     205 301821 java.lang.System.identityHashCode
 100  0.02% 95.40%     203 301705 jdk.vm.ci.hotspot.CompilerToVM.getImplementor
 101  0.02% 95.42%     202 302966 org.graalvm.compiler.lir.alloc.lsra.LinearScanOptimizeSpillPositionPhase.optimizeInterval
 102  0.02% 95.43%     200 302676 org.graalvm.compiler.graph.NodeClass.applyEdges
 103  0.02% 95.45%     199 302811 org.graalvm.compiler.lir.alloc.lsra.LinearScanLifetimeAnalysisPhase.buildIntervals
 104  0.02% 95.47%     198 302580 org.graalvm.collections.EconomicMapImpl.getHashIndex
 105  0.02% 95.49%     197 301832 jdk.vm.ci.hotspot.HotSpotJVMCIRuntime.fromClass0
 106  0.02% 95.50%     193 301861 jdk.vm.ci.hotspot.CompilerToVM.hasNeverInlineDirective
 107  0.02% 95.52%     192 302634 org.graalvm.compiler.phases.common.LoweringPhase$Round.process
 108  0.02% 95.54%     190 302931 org.graalvm.compiler.phases.common.ConditionalEliminationPhase$Instance.processNodes
 109  0.02% 95.55%     189 302442 org.graalvm.compiler.graph.NodeClass.applyHelper
 110  0.02% 95.57%     189 304610 com.oracle.truffle.r.runtime.data.RDataFactory.createDoubleVector
 111  0.02% 95.59%     188 303152 org.graalvm.compiler.graph.iterators.PredicatedProxyNodeIterator.forward
 112  0.02% 95.60%     187 303066 org.graalvm.compiler.lir.ValueConsumer.visitValue
 113  0.02% 95.62%     184 301865 org.graalvm.compiler.replacements.PEGraphDecoder.canonicalizeFixedNode
 114  0.02% 95.64%     183 301015 java.lang.String.intern
 115  0.02% 95.65%     183 302475 org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlock
 116  0.02% 95.67%     183 302771 jdk.vm.ci.hotspot.CompilerToVM.getSymbol
 117  0.02% 95.69%     182 303575 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative
 118  0.02% 95.70%     181 303107 org.graalvm.compiler.graph.NodeClass.dataEquals
 119  0.02% 95.72%     180 302683 org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks
 120  0.02% 95.73%     179 302073 org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition
 121  0.02% 95.75%     178 303522 org.graalvm.compiler.nodes.LogicNegationNode.implies
 122  0.02% 95.77%     178 305474 com.oracle.truffle.object.TrieNode$BitmapNode.find
 123  0.02% 95.78%     177 303130 org.graalvm.compiler.nodes.GraphDecoder.makeFixedNodeInputs
 124  0.02% 95.80%     171 303072 org.graalvm.compiler.lir.alloc.lsra.LinearScan.allocate
 125  0.02% 95.81%     170 302027 jdk.vm.ci.hotspot.CompilerToVM.getComponentType
 126  0.02% 95.83%     169 302164 org.graalvm.compiler.phases.common.ConditionalEliminationUtil.tryProveGuardCondition
 127  0.02% 95.84%     169 302179 org.graalvm.compiler.nodes.GraphDecoder.readProperties
 128  0.02% 95.86%     169 305199 com.oracle.truffle.r.runtime.data.RDoubleVector$FastPathAccess.getDoubleImpl
 129  0.01% 95.87%     168 302015 jdk.vm.ci.hotspot.CompilerToVM.getImplementor
 130  0.01% 95.89%     158 302235 org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks
 131  0.01% 95.90%     158 302500 org.graalvm.compiler.nodes.FrameState.applyToNonVirtual
 132  0.01% 95.91%     150 303089 org.graalvm.compiler.lir.ValueConsumer.visitValue
 133  0.01% 95.93%     149 303463 org.graalvm.compiler.lir.LIRInstruction.visitEachState
 134  0.01% 95.94%     145 303279 org.graalvm.compiler.core.common.spi.JavaConstantFieldProvider.isStableField
 135  0.01% 95.95%     144 303313 org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks
 136  0.01% 95.97%     143 302684 org.graalvm.compiler.nodes.java.InstanceOfNode.implies
 137  0.01% 95.98%     143 302706 org.graalvm.compiler.phases.common.CanonicalizerPhase$Instance.processNode
 138  0.01% 95.99%     142 302498 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.processNodes
 139  0.01% 96.00%     142 302661 org.graalvm.compiler.phases.common.inlining.walker.ComputeInliningRelevance.createLoopScope
 140  0.01% 96.02%     142 303031 org.graalvm.collections.EconomicMapImpl.find
 141  0.01% 96.03%     142 303342 org.graalvm.compiler.core.common.Fields.copy
 142  0.01% 96.04%     142 303638 org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.spillCollectInactiveAny
 143  0.01% 96.05%     141 302918 org.graalvm.compiler.virtual.phases.ea.PartialEscapeClosure.collectLockedVirtualObjects
 144  0.01% 96.07%     140 303401 org.graalvm.compiler.lir.constopt.ConstantTreeAnalyzer.process
 145  0.01% 96.08%     137 302206 org.graalvm.collections.EconomicMapImpl.getHashIndex
 146  0.01% 96.09%     136 302628 org.graalvm.collections.EconomicMapImpl.compareKeys
 147  0.01% 96.10%     134 302394 org.graalvm.compiler.nodes.StructuredGraph.maybeCompress
 148  0.01% 96.12%     133 303043 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.scheduleEarliestIterative
 149  0.01% 96.13%     131 305654 com.oracle.truffle.api.library.LibraryFactory.getUncached
 150  0.01% 96.14%     130 305450 java.util.ArrayList.forEach
 151  0.01% 96.15%     126 302366 org.graalvm.compiler.graph.InputEdges.update
 152  0.01% 96.16%     125 301857 jdk.vm.ci.hotspot.CompilerToVM.lookupType
 153  0.01% 96.17%     124 302917 org.graalvm.compiler.graph.NodeClass$RawEdgesIterator.forward
 154  0.01% 96.18%     120 302932 org.graalvm.compiler.phases.schedule.SchedulePhase$Instance.sortNodesLatestWithinBlock
 155  0.01% 96.19%     119 301686 jdk.vm.ci.hotspot.CompilerToVM.getImplementor
 156  0.01% 96.20%     119 302468 org.graalvm.compiler.nodes.cfg.ControlFlowGraph.identifyBlocks
 157  0.01% 96.21%     119 302630 org.graalvm.collections.EconomicMapImpl.find
 158  0.01% 96.23%     117 303005 org.graalvm.compiler.graph.iterators.PredicatedProxyNodeIterator.forward
 159  0.01% 96.24%     116 302737 jdk.vm.ci.hotspot.CompilerToVM.resolveFieldInPool
 160  0.01% 96.25%     116 303412 org.graalvm.compiler.lir.alloc.lsra.LinearScanWalker.freeCollectInactiveAny
 161  0.01% 96.26%     115 303421 org.graalvm.compiler.lir.alloc.lsra.LinearScan.splitChildAtOpId
 162  0.01% 96.27%     114 302901 org.graalvm.compiler.lir.RedundantMoveElimination$Optimization.updateState
 163  0.01% 96.28%     114 302954 org.graalvm.compiler.phases.common.FixReadsPhase$RawConditionalEliminationVisitor.replaceConstantInputs
 164  0.01% 96.29%     114 303372 org.graalvm.compiler.core.match.MatchPattern.matchShape
 165  0.01% 96.30%     113 303241 org.graalvm.compiler.lir.stackslotalloc.FixPointIntervalBuilder.markOutInterval
CPU SAMPLES END
